{"version":3,"sources":["logo.svg","earth.png","StyledComponents/index.js","Helper/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","StarSC","styled","div","props","x","moveY","sp","delay","SmStarSC","MdStarSC","LgStarSC","keyframes","window","innerHeight","maxX","innerWidth","randomUpTo","upperLimit","Math","floor","random","stars","n","rX","rDelay","i","push","key","addStars","App","className","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mLAAAA,EAAOC,QAAU,IAA0B,kC,kCCA3CD,EAAOC,QAAU,IAA0B,mC,qyBCE3C,IAAMC,EAASC,IAAOC,IAAV,KAKF,SAAAC,GAAK,OAAIA,EAAMC,KACV,kBAAMC,KAAS,SAAAF,GAAK,OAAIA,EAAMG,MACvC,SAAAH,GAAK,gBAAOA,EAAMI,MAAb,SAGEC,EAAWP,YAAOD,EAAPC,CAAH,KAKRQ,EAAWR,YAAOD,EAAPC,CAAH,KAKRS,EAAWT,YAAOD,EAAPC,CAAH,KAOfI,EAAQM,YAAH,IAEuBC,OAAOC,aC3BnCC,EAAOF,OAAOG,WAEPC,EAAa,SAAAC,GAAU,OAAIC,KAAKC,MAAMD,KAAKE,SAAWH,ICC7DI,EDEkB,SAAAC,GAKtB,IAJA,IAAMC,EAAK,kBAAMP,EAAWF,IACtBU,EAAS,kBAAM,EAAIR,EAAW,OAE9BK,EAAQ,GACLI,EAAI,EAAGA,EAAIH,IAAKG,EACvBJ,EAAMK,KACJ,kBAAClB,EAAD,CAAUmB,IAAK,IAAMF,EAAGrB,EAAGmB,IAAMjB,GAAI,GAAIC,MAAOiB,MAChD,kBAACf,EAAD,CAAUkB,IAAK,IAAMF,EAAGrB,EAAGmB,IAAMjB,GAAI,EAAGC,MAAOiB,MAC/C,kBAACd,EAAD,CAAUiB,IAAK,IAAMF,EAAGrB,EAAGmB,IAAMjB,GAAI,EAAGC,MAAOiB,OAInD,OAAOH,ECfKO,CAAS,IAcRC,EAbH,WACV,OACE,yBAAKC,UAAU,OACZT,EACD,4BAAQS,UAAU,eAClB,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,YACf,yBAAKA,UAAU,aCHHC,QACW,cAA7BnB,OAAOoB,SAASC,UAEe,UAA7BrB,OAAOoB,SAASC,UAEhBrB,OAAOoB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.21ab6603.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/earth.92b82e00.png\";","import styled, { keyframes } from \"styled-components\";\r\n\r\nconst StarSC = styled.div`\r\n  top: -10px;\r\n  z-index: -1;\r\n  position: absolute;\r\n  background-color: Cyan;\r\n  left: ${props => props.x}px;\r\n  animation: ${() => moveY} ${props => props.sp}s linear\r\n    ${props => `${props.delay}ms`} infinite normal;\r\n`;\r\n\r\nexport const SmStarSC = styled(StarSC)`\r\n  width: 1px;\r\n  height: 1px;\r\n`;\r\n\r\nexport const MdStarSC = styled(StarSC)`\r\n  width: 2px;\r\n  height: 2px;\r\n`;\r\n\r\nexport const LgStarSC = styled(StarSC)`\r\n  width: 3px;\r\n  height: 3px;\r\n`;\r\n\r\n// Stars and Enemies will use this to go from end to end\r\n// of the Container\r\nconst moveY = keyframes`\r\n  0%    { transform: translateY(-100px);  }\r\n  100%  { transform: translateY(${window.innerHeight}px);   }\r\n`;\r\n","import React from \"react\";\r\n\r\nimport { SmStarSC, MdStarSC, LgStarSC } from \"../StyledComponents\";\r\n\r\nconst maxX = window.innerWidth;\r\n\r\nexport const randomUpTo = upperLimit => Math.floor(Math.random() * upperLimit);\r\n// Creates 'n' star elements with animation\r\n// Returns array of stars\r\nexport const addStars = n => {\r\n  const rX = () => randomUpTo(maxX);\r\n  const rDelay = () => 0 - randomUpTo(4800);\r\n\r\n  const stars = [];\r\n  for (let i = 0; i < n; ++i) {\r\n    stars.push(\r\n      <SmStarSC key={\"a\" + i} x={rX()} sp={12} delay={rDelay()} />,\r\n      <MdStarSC key={\"b\" + i} x={rX()} sp={8} delay={rDelay()} />,\r\n      <LgStarSC key={\"c\" + i} x={rX()} sp={6} delay={rDelay()} />\r\n    );\r\n  }\r\n\r\n  return stars;\r\n};\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport earth from \"./earth.png\";\n\nimport { addStars } from \"./Helper\";\n\nconst stars = addStars(40);\nconst App = () => {\n  return (\n    <div className=\"App\">\n      {stars}\n      <header className=\"App-header\"></header>\n      <div className=\"world-container\">\n        <div className=\"rainbow\" />\n        <div className=\"earth\" />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}